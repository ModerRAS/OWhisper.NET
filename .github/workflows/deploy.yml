name: Build, Test and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    permissions: write-all
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --settings test.runsettings
      
    - name: Publish Application
      run: dotnet publish OWhisper.NET/OWhisper.NET.csproj -c Release -o publish -r win-x64 --self-contained false
      
    - name: Clean Old Releases from R2
      env:
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      shell: pwsh
      run: |
        # 安装AWS CLI工具（用于访问R2）
        if (-not (Get-Command aws -ErrorAction SilentlyContinue)) {
          Write-Host "Installing AWS CLI..."
          Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
          Start-Process msiexec.exe -Wait -ArgumentList '/i AWSCLIV2.msi /quiet'
          $env:PATH = "$env:PATH;C:\Program Files\Amazon\AWSCLIV2"
        }

        # 配置AWS CLI访问R2
        aws configure set aws_access_key_id $env:R2_ACCESS_KEY_ID --profile r2
        aws configure set aws_secret_access_key $env:R2_SECRET_ACCESS_KEY --profile r2
        aws configure set region auto --profile r2

        Write-Host "开始清理R2存储桶中的旧文件..."

        # 获取所有文件列表
        $allFiles = aws s3api list-objects-v2 --bucket $env:R2_BUCKET --endpoint-url $env:S3_ENDPOINT --profile r2 --query 'Contents[].{Key:Key,LastModified:LastModified}' --output json | ConvertFrom-Json

        if (-not $allFiles) {
          Write-Host "未找到任何文件，跳过清理步骤"
          exit 0
        }

        # 分类文件
        $fullPackages = @()
        $deltaPackages = @()
        $otherFiles = @()

        foreach ($file in $allFiles) {
          $fileName = $file.Key
          $lastModified = [DateTime]::Parse($file.LastModified)
          
          if ($fileName -match "OWhisper\.NET-[\d\.]+-nightly-win-x64-full\.nupkg$") {
            $fullPackages += @{
              Key = $fileName
              LastModified = $lastModified
            }
          }
          elseif ($fileName -match "OWhisper\.NET-[\d\.]+-nightly-win-x64-delta\.nupkg$") {
            $deltaPackages += @{
              Key = $fileName
              LastModified = $lastModified
            }
          }
          else {
            $otherFiles += @{
              Key = $fileName
              LastModified = $lastModified
            }
          }
        }

        Write-Host "找到 $($fullPackages.Count) 个完整包文件"
        Write-Host "找到 $($deltaPackages.Count) 个增量包文件"
        Write-Host "找到 $($otherFiles.Count) 个其他文件"

        # 删除文件的函数
        function Remove-S3File {
          param($key)
          try {
            aws s3api delete-object --bucket $env:R2_BUCKET --key $key --endpoint-url $env:S3_ENDPOINT --profile r2
            Write-Host "已删除: $key"
            return $true
          }
          catch {
            Write-Warning "删除文件失败: $key - $($_.Exception.Message)"
            return $false
          }
        }

        # 记录被删除的文件名
        $deletedFiles = @()

        # 清理完整包：只保留最新的1个
        if ($fullPackages.Count -gt 1) {
          $sortedFullPackages = $fullPackages | Sort-Object LastModified -Descending
          $packagesToDelete = $sortedFullPackages | Select-Object -Skip 1
          
          Write-Host "需要删除 $($packagesToDelete.Count) 个旧的完整包"
          foreach ($package in $packagesToDelete) {
            if (Remove-S3File $package.Key) {
              $deletedFiles += $package.Key
            }
          }
        }

        # 清理增量包：保留最近一年的
        if ($deltaPackages.Count -gt 0) {
          $oneMonthAgo = (Get-Date).AddDays(-365)
          $recentDeltas = $deltaPackages | Where-Object { $_.LastModified -gt $oneMonthAgo }
          $oldDeltas = $deltaPackages | Where-Object { $_.LastModified -le $oneMonthAgo }
          
          Write-Host "最近一年内的增量包: $($recentDeltas.Count) 个"
          Write-Host "超过一年的增量包: $($oldDeltas.Count) 个"
          
          # 如果清理后会导致没有增量包剩下，至少保留最新的30个
          if ($recentDeltas.Count -eq 0 -and $deltaPackages.Count -gt 30) {
            $sortedDeltas = $deltaPackages | Sort-Object LastModified -Descending
            $deltasToDelete = $sortedDeltas | Select-Object -Skip 30
            
            Write-Host "保留最新的30个增量包，删除 $($deltasToDelete.Count) 个旧的增量包"
            foreach ($delta in $deltasToDelete) {
              if (Remove-S3File $delta.Key) {
                $deletedFiles += $delta.Key
              }
            }
          }
          elseif ($oldDeltas.Count -gt 0) {
            # 正常情况：删除超过一年的增量包
            Write-Host "删除 $($oldDeltas.Count) 个超过一年的增量包"
            foreach ($delta in $oldDeltas) {
              if (Remove-S3File $delta.Key) {
                $deletedFiles += $delta.Key
              }
            }
          }
        }

        # 更新releases.nightly-win-x64.json文件
        if ($deletedFiles.Count -gt 0) {
          Write-Host "正在更新 releases.nightly-win-x64.json 文件..."
          
          try {
            # 下载现有的releases文件
            $releasesFile = "releases.nightly-win-x64.json"
            aws s3api get-object --bucket $env:R2_BUCKET --key $releasesFile --endpoint-url $env:S3_ENDPOINT --profile r2 $releasesFile
            
            if (Test-Path $releasesFile) {
              # 解析JSON
              $releasesData = Get-Content $releasesFile -Raw | ConvertFrom-Json
              
              # 移除已删除文件对应的资产
              $originalCount = $releasesData.Assets.Count
              $releasesData.Assets = $releasesData.Assets | Where-Object { 
                -not ($deletedFiles -contains $_.FileName) 
              }
              $newCount = $releasesData.Assets.Count
              
              Write-Host "从releases文件中移除了 $($originalCount - $newCount) 个资产条目"
              
              # 重新上传更新后的文件
              $releasesData | ConvertTo-Json -Compress | Out-File -FilePath $releasesFile -Encoding UTF8
              aws s3api put-object --bucket $env:R2_BUCKET --key $releasesFile --body $releasesFile --endpoint-url $env:S3_ENDPOINT --profile r2
              
              Write-Host "已更新 releases.nightly-win-x64.json 文件"
              
              # 清理临时文件
              Remove-Item $releasesFile -ErrorAction SilentlyContinue
            }
            else {
              Write-Warning "未找到 releases.nightly-win-x64.json 文件"
            }
          }
          catch {
            Write-Warning "更新releases文件时出错: $($_.Exception.Message)"
          }
        }

        Write-Host "清理完成"
      
    - name: Create and Upload Velopack Release
      env:
        BUILD_NUMBER: ${{github.run_number}}
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
        
      shell: pwsh
      run: |
        dotnet tool install -g vpk
        $Version = Get-Date -Format "yyyy.M.$env:BUILD_NUMBER"
        vpk download s3 --channel nightly-win-x64 --bucket $env:R2_BUCKET --endpoint $env:S3_ENDPOINT --keyId $env:R2_ACCESS_KEY_ID --secret $env:R2_SECRET_ACCESS_KEY
        vpk pack -u OWhisper.NET --channel nightly-win-x64 -v $Version -p publish --framework net48
        vpk upload s3 --channel nightly-win-x64 --bucket $env:R2_BUCKET --endpoint $env:S3_ENDPOINT --keyId $env:R2_ACCESS_KEY_ID --secret $env:R2_SECRET_ACCESS_KEY
